name: Deploy

on: [push]

jobs:
  publish_image:
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set application version
        id: app_version
        run: echo "::set-output name=prefix::$(date +'%Y-%m-%d').${{ github.run_number }}."
      - name: Generate docker image tags and labels
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,priority=2000,format=short,prefix=${{ steps.app_version.outputs.prefix }},enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,event=branch
      - name: Login to container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [publish_image]

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Authenticate to the cluster
        env:
          KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER }}
          KUBE_CERT: ${{ secrets.KUBE_CERT }}
          KUBE_TOKEN: ${{ secrets.KUBE_TOKEN }}
        run: |
          echo "${KUBE_CERT}" > ca.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials deploy-user --token=${KUBE_TOKEN}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${{ secrets.KUBE_NAMESPACE}}
          kubectl config get-contexts
          kubectl config use-context ${KUBE_CLUSTER}
      - name: Apply the updated manifest
        run: |
          export APP_VERSION="${{ needs.publish_image.outputs.app_version }}"
          sed -i "s/appVersionPlaceholder/${APP_VERSION}/g" kubectl_deploy/deployment.yaml
          kubectl --namespace=${{ secrets.KUBE_NAMESPACE }} apply \
            -f kubectl_deploy/deployment.yaml \
            -f kubectl_deploy/service.yaml \
            -f kubectl_deploy/ingress.yaml
